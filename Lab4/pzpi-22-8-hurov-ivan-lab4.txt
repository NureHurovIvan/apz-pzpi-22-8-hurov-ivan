Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
З лабораторної роботи №4
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»






Виконавець:		
ст. гр. ПЗПІ-22-8						                    Гуров І. Г. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	




Харків 2025
4 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРОГРАМНОГО ЗАСТОСУНКУ МОБІЛЬНОГО ПРИСТРОЮ ДЛЯ ПРОГРАМНОЇ СИСТЕМИ
4.1 ІСТОРІЯ ЗМІН


Зміни в документі нотуються до таблиці 4.1.

Таблиця 4.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	31.05.25	0.1	Створено розділ «Історія змін»
2	31.05.25	0.1	Створено розділ «Завдання»
3	31.05.25	0.1	Створено розділ «Опис виконаної роботи»
4	31.05.25	0.1	Створено розділ «Висновки»
5	02.06.25	0.2	Додано додаток А з посиланням на відеоролик
6	02.06.25	0.2	Додано додаток Б з графічними матеріалами
7	02.06.25	0.2	Додано додаток В з програмним кодом


4.2 ЗАВДАННЯ


Мета завдання полягає в розробці функціональної частини програмної системи, яка забезпечує підтримку роботи клієнтів на мобільній платформі Android. Програмний застосунок під назвою "AutoCare Mobile App" розробляється з метою створення зручного та інтуїтивно зрозумілого інтерфейсу, адаптованого до потреб користувачів. Основний акцент робиться на реалізації базового функціоналу, який включає додавання нових автомобілів до профілю користувача, перегляд наявного списку автомобілів та видалення непотрібних записів. Крім того, застосунок має забезпечувати відображення даних датчиків, таких як тиск у шинах (у PSI), стан батареї (у вольтах) та товщина гальмівних колодок (у міліметрах). Ця мета спрямована на створення надійного мобільного інструменту, який дозволяє користувачам ефективно керувати інформацією про свої автомобілі, забезпечуючи простоту використання та базову інтеграцію з серверною частиною системи через MongoDB за допомогою REST API. Розробка включає врахування принципів адаптивного дизайну для смартфонів.


4.3	 ОПИС ВИКОНАНОЇРОБОТИ


•	Мобільний застосунок "AutoCare Mobile App" побудовано за архітектурою MVVM (Model-View-ViewModel) із використанням Kotlin як основної мови програмування. Проєкт структуровано в Android Studio з окремими модулями для даних, UI та логіки. Навігація між екранами реалізовано через Navigation Component. Опишемо ключові шари:
•	UI-шар:
•	Екрани (AuthScreen.kt, VehicleListScreen.kt, VehicleDetailsScreen.kt) реалізовані як фрагменти з XML-розміткою.
•	Візуальні компоненти включають текстові поля (EditText), кнопки (Button), списки (RecyclerView) та текст (TextView).
•	Управління станом здійснюється через ViewModel із LiveData для оновлення UI.
•	Дані та мережевий шар:
•	Використано Retrofit для інтеграції з REST API та MongoDB .
•	Gson конвертує JSON-відповіді в Kotlin-об’єкти (User.kt, Vehicle.kt).
•	Локальне сховище:
•	Використано SharedPreferences для збереження JWT-токена після автентифікації.
•	Технології та компоненти:
•	Kotlin як основна мова.
•	Android SDK для базової функціональності.
•	Retrofit + Gson для мережевих запитів.
•	Navigation Component для навігації.
•	LiveData і ViewModel для управління станом.
•	SharedPreferences для локального зберігання токена.
•	Застосунок працює як клієнтська частина системи, дозволяючи користувачам взаємодіяти з CRUD-операціями (додавання, перегляд, видалення автомобілів). Бізнес-логіка включає автентифікацію через JWT, синхронізацію з MongoDB і відображення даних датчиків.
•	Взаємодія з бекендом:
•	Retrofit використовується для HTTP-запитів (GET/POST/DELETE) до сервера.
•	JWT-токен передається в заголовках для авторизації.
•	Дані про автомобілі синхронізуються з MongoDB через REST API.
•	Інтернаціоналізація:
•	Тексти винесено в strings.xml для підтримки локалізації (наразі англійська та українська).
•	Функціональність:
•	AuthScreen.kt: Реалізує логін і реєстрацію з JWT-автентифікацією.
•	VehicleListScreen.kt: Відображає список автомобілів із кнопками "View Details" і "Delete".
•	VehicleDetailsScreen.kt: Показує деталі автомобіля та дані датчиків.
•	Застосунок забезпечує базовий захист даних через JWT, але шифрування локального зберігання не реалізовано.


4.4 ВИСНОВКИ


У ході виконання завдання було успішно розроблено мобільний застосунок "AutoCare Mobile App" для платформи Android, який відповідає поставленій меті та забезпечує базовий функціонал для управління автомобілями. Застосунок створено з використанням мови програмування Kotlin та побудовано за архітектурою MVVM (Model-View-ViewModel), що сприяє чіткому розподілу обов’язків між компонентами, полегшує тестування та подальшу підтримку коду.
Застосунок має мінімалістичний інтерфейс із акцентом на простоту використання: форма для додавання автомобілів, список автомобілів із кнопками для перегляду деталей та видалення, а також екран із даними датчиків. Загалом, застосунок готовий до використання та може бути основою для подальшого розвитку.
 
ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/_KfZHhIhyXE
Хронологічний опис:
00:00: Початок
00:16: Вхід, перехід на головний екран.
00:31: Додавання авто
00:58: Перегляд статистики
01:35: Переклад  
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – UML діаграма прецедентів

 
Рисунок Б.2 – UML діаграма компонентів

 
Рисунок Б.3 – ER-модель даних мобільної платформи

 
Рисунок Б.4 – UML діаграма діяльності
 
ДОДАТОК В
Програмний код авторизації веб-частини
В.1 Реєстрація
GitHub репозиторій: https://github.com/NureHurovIvan/apz-pzpi-22-8-hurov-ivan/blob/main/Lab4/pzpi-22-8-hurov-ivan-lab4/auth/AuthScreen.kt
1	import { useState } from 'react';
1  package com.autocare.autocare1.ui.auth
 2  
 3  import androidx.compose.foundation.layout.*
 4  import androidx.compose.material3.*
 5  import androidx.compose.runtime.*
 6  import androidx.compose.ui.Alignment
 7  import androidx.compose.ui.Modifier
 8  import androidx.compose.ui.unit.dp
 9  import androidx.hilt.navigation.compose.hiltViewModel
10  import com.autocare.autocare1.ui.components.*
11  
12  @Composable
13  fun AuthScreen(
14      onAuthSuccess: (String) -> Unit,
15      viewModel: AuthViewModel = hiltViewModel()
16  ) {
17      var isLogin by remember { mutableStateOf(true) }
18      var email by remember { mutableStateOf("") }
19      var password by remember { mutableStateOf("") }
20  
21      val authState by viewModel.authState.collectAsState()
22  
23      LaunchedEffect(authState) {
24          if (authState is AuthState.Success) {
25              onAuthSuccess((authState as AuthState.Success).token)
26          }
27      }
28  
29      Column(
30          modifier = Modifier
31              .fillMaxSize()
32              .padding(16.dp),
33          horizontalAlignment = Alignment.CenterHorizontally,
34          verticalArrangement = Arrangement.Center
35      ) {
36          Text(
37              text = if (isLogin) "Login" else "Register",
38              style = MaterialTheme.typography.headlineMedium,
39              modifier = Modifier.padding(bottom = 32.dp)
40          )
41  
42          when (authState) {
43              is AuthState.Loading -> LoadingSpinner()
44              is AuthState.Error -> ErrorMessage((authState as AuthState.Error).message)
45              else -> {
46                  AutoCareTextField(
47                      value = email,
48                      onValueChange = { email = it },
49                      label = "Email",
50                      modifier = Modifier.padding(bottom = 16.dp)
51                  )
52  
53                  AutoCareTextField(
54                      value = password,
55                      onValueChange = { password = it },
56                      label = "Password",
57                      isPassword = true,
58                      modifier = Modifier.padding(bottom = 24.dp)
59                  )
60  
61                  AutoCareButton(
62                      onClick = {
63                          if (isLogin) {
64                              viewModel.login(email, password)
65                          } else {
66                              viewModel.register(email, password)
67                          }
68                      },
69                      text = if (isLogin) "Login" else "Register",
70                      modifier = Modifier.padding(bottom = 16.dp)
71                  )
72  
73                  TextButton(
74                      onClick = { isLogin = !isLogin }
75                  ) {
76                      Text(
77                          text = if (isLogin) "Need an account? Register" else "Have an account? Login"
78                      )
79                  }
80              }
81          }
82      }
83  }


В.2 Екран деталей автомобіля.
GitHub репозиторій: https://github.com/NureHurovIvan/apz-pzpi-22-8-hurov-ivan/blob/main/Lab4/pzpi-22-8-hurov-ivan-lab4/vehicles/VehicleDetailsScreen.kt
  1  package com.autocare.autocare1.ui.vehicles
  2  
  3  import androidx.compose.foundation.layout.*
  4  import androidx.compose.material3.*
  5  import androidx.compose.runtime.*
  6  import androidx.compose.ui.Modifier
  7  import androidx.compose.ui.unit.dp
  8  import androidx.hilt.navigation.compose.hiltViewModel
  9  import com.autocare.autocare1.data.model.Vehicle
 10  import com.autocare.autocare1.ui.components.*
 11  
 12  @Composable
 13  fun VehicleDetailsScreen(
 14      token: String,
 15      vehicleId: String,
 16      onNavigateBack: () -> Unit,
 17      viewModel: VehiclesViewModel = hiltViewModel()
 18  ) {
 19      val selectedVehicleState by viewModel.selectedVehicleState.collectAsState()
 20  
 21      LaunchedEffect(vehicleId) {
 22          viewModel.loadVehicleDetails(token, vehicleId)
 23      }
 24  
 25      Scaffold(
 26          topBar = {
 27              TopAppBar(
 28                  title = { Text("Vehicle Details") },
 29                  navigationIcon = {
 30                      IconButton(onClick = onNavigateBack) {
 31                          Text("←")
 32                      }
 33                  }
 34              )
 35          }
 36      ) { padding ->
 37          when (val state = selectedVehicleState) {
 38              is SelectedVehicleState.Loading -> LoadingSpinner()
 39              is SelectedVehicleState.Error -> ErrorMessage(state.message)
 40              is SelectedVehicleState.Success -> {
 41                  VehicleDetails(
 42                      vehicle = state.vehicle,
 43                      modifier = Modifier.padding(padding)
 44                  )
 45              }
 46              else -> {}
 47          }
 48      }
 49  }
 50  
 51  @Composable
 52  fun VehicleDetails(
 53      vehicle: Vehicle,
 54      modifier: Modifier = Modifier
 55  ) {
 56      Column(
 57          modifier = modifier
 58              .fillMaxSize()
 59              .padding(16.dp)
 60      ) {
 61          Card(
 62              modifier = Modifier.fillMaxWidth()
 63          ) {
 64              Column(
 65                  modifier = Modifier.padding(16.dp)
 66              ) {
 67                  Text(
 68                      text = "${vehicle.year} ${vehicle.make} ${vehicle.model}",
 69                      style = MaterialTheme.typography.headlineSmall,
 70                      modifier = Modifier.padding(bottom = 16.dp)
 71                  )
 72  
 73                  Text(
 74                      text = "Sensor Data",
 75                      style = MaterialTheme.typography.titleMedium,
 76                      modifier = Modifier.padding(bottom = 8.dp)
 77                  )
 78  
 79                  SensorDataItem(
 80                      label = "Tire Pressure",
 81                      value = "${vehicle.sensorData.tirePressure} PSI"
 82                  )
 83  
 84                  SensorDataItem(
 85                      label = "Battery Voltage",
 86                      value = "${vehicle.sensorData.batteryVoltage} V"
 87                  )
 88  
 89                  SensorDataItem(
 90                      label = "Brake Pad Thickness",
 91                      value = "${vehicle.sensorData.brakePadThickness} mm"
 92                  )
 93              }
 94          }
 95      }
 96  }
 97  
 98  @Composable
 99  fun SensorDataItem(
100      label: String,
101      value: String,
102      modifier: Modifier = Modifier
103  ) {
104      Row(
105          modifier = modifier
106              .fillMaxWidth()
107              .padding(vertical = 4.dp),
108          horizontalArrangement = Arrangement.SpaceBetween
109      ) {
110          Text(text = label)
111          Text(text = value)
112      }
113  }


В.3 ViewModel для автомобілів. GitHub репозиторій: https://github.com/NureHurovIvan/apz-pzpi-22-8-hurov-ivan/blob/main/Lab4/pzpi-22-8-hurov-ivan-lab4/vehicles/VehiclesViewModel.kt
  1  package com.autocare.autocare1.ui.vehicles
  2  
  3  import androidx.lifecycle.ViewModel
  4  import androidx.lifecycle.viewModelScope
  5  import com.autocare.autocare1.data.model.Vehicle
  6  import com.autocare.autocare1.data.repository.AutoCareRepository
  7  import dagger.hilt.android.lifecycle.HiltViewModel
  8  import kotlinx.coroutines.flow.MutableStateFlow
  9  import kotlinx.coroutines.flow.StateFlow
 10  import kotlinx.coroutines.launch
 11  import javax.inject.Inject
 12  
 13  @HiltViewModel
 14  class VehiclesViewModel @Inject constructor(
 15      private val repository: AutoCareRepository
 16  ) : ViewModel() {
 17  
 18      private val _vehiclesState = MutableStateFlow<VehiclesState>(VehiclesState.Initial)
 19      val vehiclesState: StateFlow<VehiclesState> = _vehiclesState
 20  
 21      private val _selectedVehicleState = MutableStateFlow<SelectedVehicleState>(SelectedVehicleState.Initial)
 22      val selectedVehicleState: StateFlow<SelectedVehicleState> = _selectedVehicleState
 23  
 24      fun loadVehicles(token: String) {
 25          viewModelScope.launch {
 26              try {
 27                  _vehiclesState.value = VehiclesState.Loading
 28                  val vehicles = repository.getVehicles(token)
 29                  _vehiclesState.value = VehiclesState.Success(vehicles)
 30              } catch (e: Exception) {
 31                  _vehiclesState.value = VehiclesState.Error(e.message ?: "Failed to load vehicles")
 32              }
 33          }
 34      }
 35  
 36      fun addVehicle(token: String, make: String, model: String, year: Int) {
 37          viewModelScope.launch {
 38              try {
 39                  val vehicle = Vehicle(make = make, model = model, year = year)
 40                  val addedVehicle = repository.addVehicle(token, vehicle)
 41                  loadVehicles(token)
 42              } catch (e: Exception) {
 43                  _vehiclesState.value = VehiclesState.Error(e.message ?: "Failed to add vehicle")
 44              }
 45          }
 46      }
 47  
 48      fun deleteVehicle(token: String, vehicleId: String) {
 49          viewModelScope.launch {
 50              try {
 51                  repository.deleteVehicle(token, vehicleId)
 52                  loadVehicles(token)
 53              } catch (e: Exception) {
 54                  _vehiclesState.value = VehiclesState.Error(e.message ?: "Failed to delete vehicle")
 55              }
 56          }
 57      }
 58  
 59      fun loadVehicleDetails(token: String, vehicleId: String) {
 60          viewModelScope.launch {
 61              try {
 62                  _selectedVehicleState.value = SelectedVehicleState.Loading
 63                  val vehicle = repository.getVehicle(token, vehicleId)
 64                  _selectedVehicleState.value = SelectedVehicleState.Success(vehicle)
 65              } catch (e: Exception) {
 66                  _selectedVehicleState.value = SelectedVehicleState.Error(e.message ?: "Failed to load vehicle details")
 67              }
 68          }
 69      }
 70  }
 71  
 72  sealed class VehiclesState {
 73      object Initial : VehiclesState()
 74      object Loading : VehiclesState()
 75      data class Success(val vehicles: List<Vehicle>) : VehiclesState()
 76      data class Error(val message: String) : VehiclesState()
 77  }
 78  
 79  sealed class SelectedVehicleState {
 80      object Initial : SelectedVehicleState()
 81      object Loading : SelectedVehicleState()
 82      data class Success(val vehicle: Vehicle) : SelectedVehicleState()
 83      data class Error(val message: String) : SelectedVehicleState()
 84  }
